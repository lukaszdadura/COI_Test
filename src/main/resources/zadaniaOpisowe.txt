1. Klasa jest schematem opisującym właściwości i zachowania obiektu/ów danej klasy. Obiekt jest z kolei fizyczną reprezentacją danej klasy (instancją). Dopiero po stworzeniu obiektu danej klasy możemy przypisać wartości polom (właściwości) i wykonywać na nim metody (zachowania). Oczywiście nie dotyczy to pól i metod statycznych klasy. Klasy deklarujemy używając słowa kluczowego class, a obiekty tworzymy przy użyciu słowa kluczowego new.
2. Interfejsy służą do definiowania zachowań obiektów (zawierają jedynie deklaracje metod i stałe; mogą zawierać również metody domyślne, statyczne i prywatne), a klasy abstrakcyjne oprócz definicji zachowań obiektów mogą również posiadać ich implementację (pola, metody z implementacją. Klasa może implementować wiele interfejsów, ale rozszerzać tylko jedną klasę abstrakcyjną.
3. Dziedziczenie w Javie jest mechanizmem umożliwiającym obiektowi otrzymanie właściwości i zachowań obiektu rodzica. Do implementacji dziedziczenia używamy słowa kluczowego extends po nazwie klasy. Klasa może dziedziczyć tylko po jednej klasie, ale może również rozszerzać kolejną klasę. W przypadku dziedziczenia po klasie abstrakcyjnej klasa musi nadpisać wszystkie metody abstrakcyjne klasy nadrzędnej inaczej również musi zostać zadeklarowana jako klasa abstrakcyjna. Klasa dziedzicząca ma dostęp bezpośrednio do wszystkich metod i pól klasy nadrzędnej, które nie są zadeklarowane jako private. Konstruktory klasy nadrzędnej nie są dziedziczone. Umieszczenie słowa kluczowego final w deklaracji klasy uniemożliwia dziedziczenie po danej klasie. Umieszczenie słowa kluczowego final w deklaracji metody uniemożliwia jej nadpisanie w klasie podrzędnej.
4. B
5. A
6. W Javie występują modyfikatory dostępu, które określają poziom dostępności elementu, który poprzedzają. Deklarujemy je przez użycie słów kluczowych private, protected, public, lub przy braku użycia któregokolwiek z powyższych. Private - najbardziej restrykcyjny modyfikator dostępu. Oznacza, że dany element jest dostępny tylko wewnątrz danej klasy. Protected oznacza, że dany element jest dostępny wewnątrz danej klasy, klas po niej dziedziczących oraz innych klas w tym samym pakiecie. Public - najbardziej otwarty modyfikator dostępu. Oznacza, że dany element nie posiada restrykcji w dostępie. Brak modyfikatora dostępu oznacza, że dany element jest dostępny tylko wewnątrz pakietu.
7. A
8. Git - done
9. Git - done - bez testów
10. W tym przypadku zastosowałbym wzorzec MVC do zbudowania aplikacji webowej przy użyciu frameworku Spring i bazy danych MySQL. Jako warstwę danych zastosowałbym encje person, achievement i personAchievement do przechowywania kolejno informacji o osobach, informacji o osiągnięciach oraz informacji o przypisaniach osób do osiągnięć. Dwie pierwsze encje byłby połączone relacją one to many z obu stron, a trzecia relacją many to one zarówno z encją pierwszą jak i drugą. Jako warstwę repozytorium zastosowałbym interfejsy dla dla każdej encji rozszerzając JpaRepository. Jako warstwę serwisu zastosowałbym interfejsy dla każdej encji z potrzebnymi metodami i potem jako właściwą implementację serwisów klasy z implementacjami tych metod. Jako warstwę controllera zastosowałbym dla każdej encji controller wstrzykujący przez konstruktor wymagany serwis/serwisy i mapujący określone adresy do konkretnych widoków. Jako widoki użyłbym plików .html oraz Thymeleaf-a.
11. Git - niezrobione
12. Git - oddzielne repozytorium
13. B
14. A, B, C, D, E
15. Git - done
16. Git - done
17. Git - done
18. Jako parametry metoda przyjmuje obiekt klasy Object i obiekt klasy Integer. Oznacza to, że możemy jako argument do metody przekazać każdy obiekt, ponieważ wszystkie dziedziczą po klasie Object. W takim przypadku, kiedy przekażemy jako argument obiekt, który nie implementuje interfejsu List nie będzie możliwe wykonanie rzutowania i zostanie rzucony wyjątek ClassCastException. Możemy się przed tym zabezpieczyć przez sprawdzenie czy obiekt przekazany do metody można zrzutować na dany typ przy użyciu operatora instanceof i zastosowaniu bloku try - catch. Innym przypadkiem jest przekazanie jako argumentu typu Integer, który wykracza poza rozmiar listy, a próba wywołania obiektu spowoduje rzucenie wyjątku IndexOutOfBoundsException. Możemy się przed tym zabezpieczyć przez sprawdzenie, czy argument przekazany do metody < list.size() i zastosowaniu bloku try - catch.
19. Zależy czy chcemy porównać ze sobą obiekty, czy chcemy porównać ze sobą teksty. Jeśli porównujemy obiekty (pod względem referencji) to używamy w tym przypadku ==, a jeśli chcemy porównać teksty to używamy w tym przypadku metody statycznej equals klasy String. 1 i 2 - w tym przypadku porównujemy wartości obiektów 3 - w tym przypadku porównujemy referencje do obiektów
20. Są to obiekty, które po utworzeniu nie zmienią swojego stanu (wartości). Nie, słowo kluczowe final nie sprawia, że obiekt jest immutable, ponieważ zapewnia tylko brak możliwości zmiany referencji, którą przechowuje zmienna, a obiekt pozostaje otwarty na zmiany np. przez metody ustawiające.
21. Metoda GET przesyła dane jako część adresu URL, są one widoczne oraz zapisują się w historii przeglądarki, mają ograniczony typ/długość. Nie jest to bezpieczny sposób na przesyłanie wrażliwych informacji. Metoda POST przesyła dane w ciele zapytania i nie są one bezpośrednio widoczne. Jest to trochę bezpieczniejszy sposób niż użycie metody GET. Służy przeważnie do obsługi danych z formularzy.
22. public void printAllWords(String… words) {}